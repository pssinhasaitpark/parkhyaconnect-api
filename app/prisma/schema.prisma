generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id         String   @id @default(uuid())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  senderId   String  @default(uuid())
  receiverId String? @default(uuid())

  type String

  sender   User  @relation("SentMessages", fields: [senderId], references: [id])
  receiver User? @relation("ReceivedMessages", fields: [receiverId], references: [id])

  channelId String?
  channel   Channel? @relation(fields: [channelId], references: [id])

  seen   Boolean  @default(false)
  seenBy String[] @default([])

  reactions Reaction[] @relation("MessageReactions")

  @@index([type])
}

model Reaction {
  id         String   @id @default(uuid())
  messageId  String
  userId     String
  type       String   
  created_at DateTime @default(now())

  message Message @relation("MessageReactions", fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation("User Reactions", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model User {
  id           String   @id @default(uuid())
  fullName     String?
  mobileNumber String?  @unique
  email        String   @unique
  password     String
  avatar       String?
  socialId     String?  @unique
  status       String   @default("active")
  isOnline     Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  resetToken   String?

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  createdChannels    Channel[]       @relation("CreatedChannels")
  channelMemberships ChannelMember[]

  reactions Reaction[] @relation("User Reactions")
}

model Channel {
  id          String   @id @default(uuid())
  name        String
  description String?
  isPrivate   Boolean  @default(false)
  createdBy   String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  creator  User            @relation("CreatedChannels", fields: [createdBy], references: [id])
  messages Message[]       @relation
  members  ChannelMember[]
}

model ChannelMember {
  id         String   @id @default(uuid())
  channelId  String
  userId     String
  role       String   @default("member")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
}
